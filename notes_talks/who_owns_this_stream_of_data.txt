######Who owns this stream of Data
Alexis Beingessner

Intro:

Rust exposes a lot of ways to traverse a collection: iter, iter_mut, into_iter, and drain to name a few! This isn't a case of over-engineering: each of these kinds of iterator necessarily falls out of Rust caring about ownership, and encoding it in the type system. However even all these iterators still aren't enough to capture all the subtleties of ownership and traversal!

This talk surveys the advantages, weaknesses, and motivation of the current iterator APIs, as well as hypothetical future iterator APIs that could complete our iteration story such as Cursor and MutexIterator.

Notes

pub trait Iterator { //I can yield things
  type Item; //Things I yield
  //How I yield them
  fn next(&mut self) -> Option<Self::Item>;
}

#you can iterate something and it doesn't destroy it!

Ownership and Traversal of Data

Being extremely generic makes your APIs extremely generic

Natural reflections of ownership. Iter, IterMut, IntoIter, Drain






